{"ast":null,"code":"var AWS = require('./core');\n/**\n * @api private\n */\n\n\nfunction validateRegionalEndpointsFlagValue(configValue, errorOptions) {\n  if (typeof configValue !== 'string') return undefined;else if (['legacy', 'regional'].indexOf(configValue.toLowerCase()) >= 0) {\n    return configValue.toLowerCase();\n  } else {\n    throw AWS.util.error(new Error(), errorOptions);\n  }\n}\n/**\n * Resolve the configuration value for regional endpoint from difference sources: client\n * config, environmental variable, shared config file. Value can be case-insensitive\n * 'legacy' or 'reginal'.\n * @param originalConfig user-supplied config object to resolve\n * @param options a map of config property names from individual configuration source\n *  - env: name of environmental variable that refers to the config\n *  - sharedConfig: name of shared configuration file property that refers to the config\n *  - clientConfig: name of client configuration property that refers to the config\n *\n * @api private\n */\n\n\nfunction resolveRegionalEndpointsFlag(originalConfig, options) {\n  originalConfig = originalConfig || {}; //validate config value\n\n  var resolved;\n\n  if (originalConfig[options.clientConfig]) {\n    resolved = validateRegionalEndpointsFlagValue(originalConfig[options.clientConfig], {\n      code: 'InvalidConfiguration',\n      message: 'invalid \"' + options.clientConfig + '\" configuration. Expect \"legacy\" ' + ' or \"regional\". Got \"' + originalConfig[options.clientConfig] + '\".'\n    });\n    if (resolved) return resolved;\n  }\n\n  if (!AWS.util.isNode()) return resolved; //validate environmental variable\n\n  if (Object.prototype.hasOwnProperty.call(process.env, options.env)) {\n    var envFlag = process.env[options.env];\n    resolved = validateRegionalEndpointsFlagValue(envFlag, {\n      code: 'InvalidEnvironmentalVariable',\n      message: 'invalid ' + options.env + ' environmental variable. Expect \"legacy\" ' + ' or \"regional\". Got \"' + process.env[options.env] + '\".'\n    });\n    if (resolved) return resolved;\n  } //validate shared config file\n\n\n  var profile = {};\n\n  try {\n    var profiles = AWS.util.getProfilesFromSharedConfig(AWS.util.iniLoader);\n    profile = profiles[process.env.AWS_PROFILE || AWS.util.defaultProfile];\n  } catch (e) {}\n\n  ;\n\n  if (profile && Object.prototype.hasOwnProperty.call(profile, options.sharedConfig)) {\n    var fileFlag = profile[options.sharedConfig];\n    resolved = validateRegionalEndpointsFlagValue(fileFlag, {\n      code: 'InvalidConfiguration',\n      message: 'invalid ' + options.sharedConfig + ' profile config. Expect \"legacy\" ' + ' or \"regional\". Got \"' + profile[options.sharedConfig] + '\".'\n    });\n    if (resolved) return resolved;\n  }\n\n  return resolved;\n}\n\nmodule.exports = resolveRegionalEndpointsFlag;","map":null,"metadata":{},"sourceType":"script"}