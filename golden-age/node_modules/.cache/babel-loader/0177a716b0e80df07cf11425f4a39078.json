{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/SXS4LFP/cart/Shopping-Cart/node_modules/@babel/runtime/regenerator\");\n\nvar _slicedToArray = require(\"/Users/SXS4LFP/cart/Shopping-Cart/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"/Users/SXS4LFP/cart/Shopping-Cart/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/SXS4LFP/cart/Shopping-Cart/node_modules/@babel/runtime/helpers/createClass\");\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar sqlite3 = _interopDefault(require('sqlite3'));\n\nvar fs = _interopDefault(require('fs'));\n\nvar path = _interopDefault(require('path'));\n/**\n * SQLite client library for Node.js applications\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\n\nfunction prepareParams(args) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$offset = _ref.offset,\n      offset = _ref$offset === void 0 ? 0 : _ref$offset,\n      _ref$excludeLastArg = _ref.excludeLastArg,\n      excludeLastArg = _ref$excludeLastArg === void 0 ? false : _ref$excludeLastArg;\n\n  var hasOneParam = args.length === offset + 1 + (excludeLastArg ? 1 : 0);\n\n  if (hasOneParam) {\n    return args[offset];\n  }\n\n  return Array.prototype.slice.call(args, offset, args.length - (excludeLastArg ? 1 : 0));\n}\n\nfunction resolveTemplateStringObject(args) {\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref2$offset = _ref2.offset,\n      offset = _ref2$offset === void 0 ? 0 : _ref2$offset,\n      _ref2$excludeLastArg = _ref2.excludeLastArg,\n      excludeLastArg = _ref2$excludeLastArg === void 0 ? false : _ref2$excludeLastArg;\n\n  var hasOneParam = args.length === offset + 1 + (excludeLastArg ? 1 : 0);\n\n  if (hasOneParam && typeof args[offset] === 'object') {\n    return {\n      sql: args[offset].sql,\n      params: args[offset].values\n    };\n  }\n\n  return {\n    sql: args[offset],\n    params: prepareParams(args, {\n      offset: offset + 1,\n      excludeLastArg: excludeLastArg\n    })\n  };\n}\n/**\n * SQLite client library for Node.js applications\n *\n * Copyright © 2016 Kriasoft, LLC. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\n\nvar Statement =\n/*#__PURE__*/\nfunction () {\n  function Statement(stmt, Promise) {\n    _classCallCheck(this, Statement);\n\n    this.stmt = stmt;\n    this.Promise = Promise;\n  }\n\n  _createClass(Statement, [{\n    key: \"bind\",\n    value: function bind() {\n      var _this2 = this;\n\n      var params = prepareParams(arguments);\n      return new this.Promise(function (resolve, reject) {\n        _this2.stmt.bind(params, function (err) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(_this2);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var _this3 = this;\n\n      return new this.Promise(function (resolve) {\n        _this3.stmt.reset(function () {\n          resolve(_this3);\n        });\n      });\n    }\n  }, {\n    key: \"finalize\",\n    value: function finalize() {\n      var _this4 = this;\n\n      return new this.Promise(function (resolve, reject) {\n        _this4.stmt.finalize(function (err) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve();\n          }\n        });\n      });\n    }\n  }, {\n    key: \"run\",\n    value: function run() {\n      var _this5 = this;\n\n      var params = prepareParams(arguments);\n      return new this.Promise(function (resolve, reject) {\n        _this5.stmt.run(params, function (err) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(_this5);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"get\",\n    value: function get() {\n      var _this6 = this;\n\n      var params = prepareParams(arguments);\n      return new this.Promise(function (resolve, reject) {\n        _this6.stmt.get(params, function (err, row) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(row);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"all\",\n    value: function all() {\n      var _this7 = this;\n\n      var params = prepareParams(arguments);\n      return new this.Promise(function (resolve, reject) {\n        _this7.stmt.all(params, function (err, rows) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(rows);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"each\",\n    value: function each() {\n      var _this8 = this;\n\n      var params = prepareParams(arguments, {\n        excludeLastArg: true\n      });\n      var callback = arguments[arguments.length - 1];\n      return new this.Promise(function (resolve, reject) {\n        _this8.stmt.each(params, callback, function (err) {\n          var rowsCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n          if (err) {\n            reject(err);\n          } else {\n            resolve(rowsCount);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"sql\",\n    get: function get() {\n      return this.stmt.sql;\n    }\n  }, {\n    key: \"lastID\",\n    get: function get() {\n      return this.stmt.lastID;\n    }\n  }, {\n    key: \"changes\",\n    get: function get() {\n      return this.stmt.changes;\n    }\n  }]);\n\n  return Statement;\n}();\n\nvar asyncToGenerator = function asyncToGenerator(fn) {\n  return function () {\n    var gen = fn.apply(this, arguments);\n    return new Promise(function (resolve, reject) {\n      function step(key, arg) {\n        try {\n          var info = gen[key](arg);\n          var value = info.value;\n        } catch (error) {\n          reject(error);\n          return;\n        }\n\n        if (info.done) {\n          resolve(value);\n        } else {\n          return Promise.resolve(value).then(function (value) {\n            step(\"next\", value);\n          }, function (err) {\n            step(\"throw\", err);\n          });\n        }\n      }\n\n      return step(\"next\");\n    });\n  };\n};\n/**\n * SQLite client library for Node.js applications\n *\n * Copyright © 2016 Kriasoft, LLC. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n// eslint-disable-next-line no-unused-vars,import/no-unresolved,import/extensions\n\n\nvar Database =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Initializes a new instance of the database client.\n   * @param {sqlite3.Database} driver An instance of SQLite3 driver library.\n   * @param {{Promise: PromiseConstructor}} promiseLibrary ES6 Promise library to use.\n     */\n  function Database(driver, promiseLibrary) {\n    _classCallCheck(this, Database);\n\n    this.driver = driver;\n    this.Promise = promiseLibrary.Promise;\n  }\n  /**\n   * Close the database.\n   */\n\n\n  _createClass(Database, [{\n    key: \"close\",\n    value: function close() {\n      var _this9 = this;\n\n      return new this.Promise(function (resolve, reject) {\n        _this9.driver.close(function (err) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve();\n          }\n        });\n      });\n    }\n    /**\n     * Register listeners for Sqlite3 events\n     *\n     * @param {'trace'|'profile'|'error'|'open'|'close'} eventName\n     * @param {() => void} listener trigger listener function\n     */\n\n  }, {\n    key: \"on\",\n    value: function on(eventName, listener) {\n      this.driver.on(eventName, listener);\n    }\n  }, {\n    key: \"run\",\n    value: function run() {\n      var _this10 = this;\n\n      var _resolveTemplateStrin = resolveTemplateStringObject(arguments),\n          sql = _resolveTemplateStrin.sql,\n          params = _resolveTemplateStrin.params;\n\n      var Promise = this.Promise;\n      return new Promise(function (resolve, reject) {\n        _this10.driver.run(sql, params, function runExecResult(err) {\n          if (err) {\n            reject(err);\n          } else {\n            // Per https://github.com/mapbox/node-sqlite3/wiki/API#databaserunsql-param--callback\n            // when run() succeeds, the `this' object is a driver statement object. Wrap it as a\n            // Statement.\n            resolve(new Statement(this, Promise));\n          }\n        });\n      });\n    }\n  }, {\n    key: \"get\",\n    value: function get() {\n      var _this11 = this;\n\n      var _resolveTemplateStrin2 = resolveTemplateStringObject(arguments),\n          sql = _resolveTemplateStrin2.sql,\n          params = _resolveTemplateStrin2.params;\n\n      return new this.Promise(function (resolve, reject) {\n        _this11.driver.get(sql, params, function (err, row) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(row);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"all\",\n    value: function all() {\n      var _this12 = this;\n\n      var _resolveTemplateStrin3 = resolveTemplateStringObject(arguments),\n          sql = _resolveTemplateStrin3.sql,\n          params = _resolveTemplateStrin3.params;\n\n      return new this.Promise(function (resolve, reject) {\n        _this12.driver.all(sql, params, function (err, rows) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(rows);\n          }\n        });\n      });\n    }\n    /**\n     * Runs all the SQL queries in the supplied string. No result rows are retrieved.\n     */\n\n  }, {\n    key: \"exec\",\n    value: function exec(sql) {\n      var _this13 = this;\n\n      return new this.Promise(function (resolve, reject) {\n        _this13.driver.exec(sql, function (err) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(_this13);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"each\",\n    value: function each() {\n      var _this14 = this;\n\n      var _resolveTemplateStrin4 = resolveTemplateStringObject(arguments, {\n        excludeLastArg: true\n      }),\n          sql = _resolveTemplateStrin4.sql,\n          params = _resolveTemplateStrin4.params;\n\n      var callback = arguments[arguments.length - 1];\n      return new this.Promise(function (resolve, reject) {\n        _this14.driver.each(sql, params, callback, function (err) {\n          var rowsCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n          if (err) {\n            reject(err);\n          } else {\n            resolve(rowsCount);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"prepare\",\n    value: function prepare() {\n      var _this15 = this;\n\n      var _resolveTemplateStrin5 = resolveTemplateStringObject(arguments),\n          sql = _resolveTemplateStrin5.sql,\n          params = _resolveTemplateStrin5.params;\n\n      return new this.Promise(function (resolve, reject) {\n        var stmt = _this15.driver.prepare(sql, params, function (err) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(new Statement(stmt, _this15.Promise));\n          }\n        });\n      });\n    }\n    /**\n     * Set a configuration option for the database.\n     */\n\n  }, {\n    key: \"configure\",\n    value: function configure(option, value) {\n      this.driver.configure(option, value);\n    }\n    /**\n     * Migrates database schema to the latest version\n     */\n\n  }, {\n    key: \"migrate\",\n    value: function migrate() {\n      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          force = _ref3.force,\n          _ref3$table = _ref3.table,\n          table = _ref3$table === void 0 ? 'migrations' : _ref3$table,\n          _ref3$migrationsPath = _ref3.migrationsPath,\n          migrationsPath = _ref3$migrationsPath === void 0 ? './migrations' : _ref3$migrationsPath;\n\n      var _this = this;\n\n      return asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var location, migrations, dbMigrations, lastMigration, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _loop, _iterator, _step, _ret, lastMigrationId, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, migration;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                /* eslint-disable no-await-in-loop */\n                location = path.resolve(migrationsPath); // Get the list of migration files, for example:\n                //   { id: 1, name: 'initial', filename: '001-initial.sql' }\n                //   { id: 2, name: 'feature', fielname: '002-feature.sql' }\n\n                _context2.next = 3;\n                return new _this.Promise(function (resolve, reject) {\n                  fs.readdir(location, function (err, files) {\n                    if (err) {\n                      reject(err);\n                    } else {\n                      resolve(files.map(function (x) {\n                        return x.match(/^(\\d+).(.*?)\\.sql$/);\n                      }).filter(function (x) {\n                        return x !== null;\n                      }).map(function (x) {\n                        return {\n                          id: Number(x[1]),\n                          name: x[2],\n                          filename: x[0]\n                        };\n                      }).sort(function (a, b) {\n                        return Math.sign(a.id - b.id);\n                      }));\n                    }\n                  });\n                });\n\n              case 3:\n                migrations = _context2.sent;\n\n                if (migrations.length) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                throw new Error(\"No migration files found in '\".concat(location, \"'.\"));\n\n              case 6:\n                _context2.next = 8;\n                return Promise.all(migrations.map(function (migration) {\n                  return new _this.Promise(function (resolve, reject) {\n                    var filename = path.join(location, migration.filename);\n                    fs.readFile(filename, 'utf-8', function (err, data) {\n                      if (err) {\n                        reject(err);\n                      } else {\n                        var _data$split = data.split(/^--\\s+?down\\b/mi),\n                            _data$split2 = _slicedToArray(_data$split, 2),\n                            up = _data$split2[0],\n                            down = _data$split2[1];\n\n                        if (!down) {\n                          var message = \"The \".concat(migration.filename, \" file does not contain '-- Down' separator.\");\n                          reject(new Error(message));\n                        } else {\n                          /* eslint-disable no-param-reassign */\n                          migration.up = up.replace(/^-- .*?$/gm, '').trim(); // Remove comments\n\n                          migration.down = down.trim(); // and trim whitespaces\n\n                          /* eslint-enable no-param-reassign */\n\n                          resolve();\n                        }\n                      }\n                    });\n                  });\n                }));\n\n              case 8:\n                _context2.next = 10;\n                return _this.run(\"CREATE TABLE IF NOT EXISTS \\\"\".concat(table, \"\\\" (\\n  id   INTEGER PRIMARY KEY,\\n  name TEXT    NOT NULL,\\n  up   TEXT    NOT NULL,\\n  down TEXT    NOT NULL\\n)\"));\n\n              case 10:\n                _context2.next = 12;\n                return _this.all(\"SELECT id, name, up, down FROM \\\"\".concat(table, \"\\\" ORDER BY id ASC\"));\n\n              case 12:\n                dbMigrations = _context2.sent;\n                // Undo migrations that exist only in the database but not in files,\n                // also undo the last migration if the `force` option was set to `last`.\n                lastMigration = migrations[migrations.length - 1];\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _iteratorError = undefined;\n                _context2.prev = 17;\n                _loop =\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _loop() {\n                  var migration;\n                  return _regeneratorRuntime.wrap(function _loop$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          migration = _step.value;\n\n                          if (!(!migrations.some(function (x) {\n                            return x.id === migration.id;\n                          }) || force === 'last' && migration.id === lastMigration.id)) {\n                            _context.next = 21;\n                            break;\n                          }\n\n                          _context.next = 4;\n                          return _this.run('BEGIN');\n\n                        case 4:\n                          _context.prev = 4;\n                          _context.next = 7;\n                          return _this.exec(migration.down);\n\n                        case 7:\n                          _context.next = 9;\n                          return _this.run(\"DELETE FROM \\\"\".concat(table, \"\\\" WHERE id = ?\"), migration.id);\n\n                        case 9:\n                          _context.next = 11;\n                          return _this.run('COMMIT');\n\n                        case 11:\n                          dbMigrations = dbMigrations.filter(function (x) {\n                            return x.id !== migration.id;\n                          });\n                          _context.next = 19;\n                          break;\n\n                        case 14:\n                          _context.prev = 14;\n                          _context.t0 = _context[\"catch\"](4);\n                          _context.next = 18;\n                          return _this.run('ROLLBACK');\n\n                        case 18:\n                          throw _context.t0;\n\n                        case 19:\n                          _context.next = 22;\n                          break;\n\n                        case 21:\n                          return _context.abrupt(\"return\", \"break\");\n\n                        case 22:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _loop, this, [[4, 14]]);\n                });\n                _iterator = dbMigrations.slice().sort(function (a, b) {\n                  return Math.sign(b.id - a.id);\n                })[Symbol.iterator]();\n\n              case 20:\n                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {\n                  _context2.next = 28;\n                  break;\n                }\n\n                return _context2.delegateYield(_loop(), \"t0\", 22);\n\n              case 22:\n                _ret = _context2.t0;\n\n                if (!(_ret === \"break\")) {\n                  _context2.next = 25;\n                  break;\n                }\n\n                return _context2.abrupt(\"break\", 28);\n\n              case 25:\n                _iteratorNormalCompletion = true;\n                _context2.next = 20;\n                break;\n\n              case 28:\n                _context2.next = 34;\n                break;\n\n              case 30:\n                _context2.prev = 30;\n                _context2.t1 = _context2[\"catch\"](17);\n                _didIteratorError = true;\n                _iteratorError = _context2.t1;\n\n              case 34:\n                _context2.prev = 34;\n                _context2.prev = 35;\n\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                  _iterator.return();\n                }\n\n              case 37:\n                _context2.prev = 37;\n\n                if (!_didIteratorError) {\n                  _context2.next = 40;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 40:\n                return _context2.finish(37);\n\n              case 41:\n                return _context2.finish(34);\n\n              case 42:\n                // Apply pending migrations\n                lastMigrationId = dbMigrations.length ? dbMigrations[dbMigrations.length - 1].id : 0;\n                _iteratorNormalCompletion2 = true;\n                _didIteratorError2 = false;\n                _iteratorError2 = undefined;\n                _context2.prev = 46;\n                _iterator2 = migrations[Symbol.iterator]();\n\n              case 48:\n                if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {\n                  _context2.next = 70;\n                  break;\n                }\n\n                migration = _step2.value;\n\n                if (!(migration.id > lastMigrationId)) {\n                  _context2.next = 67;\n                  break;\n                }\n\n                _context2.next = 53;\n                return _this.run('BEGIN');\n\n              case 53:\n                _context2.prev = 53;\n                _context2.next = 56;\n                return _this.exec(migration.up);\n\n              case 56:\n                _context2.next = 58;\n                return _this.run(\"INSERT INTO \\\"\".concat(table, \"\\\" (id, name, up, down) VALUES (?, ?, ?, ?)\"), migration.id, migration.name, migration.up, migration.down);\n\n              case 58:\n                _context2.next = 60;\n                return _this.run('COMMIT');\n\n              case 60:\n                _context2.next = 67;\n                break;\n\n              case 62:\n                _context2.prev = 62;\n                _context2.t2 = _context2[\"catch\"](53);\n                _context2.next = 66;\n                return _this.run('ROLLBACK');\n\n              case 66:\n                throw _context2.t2;\n\n              case 67:\n                _iteratorNormalCompletion2 = true;\n                _context2.next = 48;\n                break;\n\n              case 70:\n                _context2.next = 76;\n                break;\n\n              case 72:\n                _context2.prev = 72;\n                _context2.t3 = _context2[\"catch\"](46);\n                _didIteratorError2 = true;\n                _iteratorError2 = _context2.t3;\n\n              case 76:\n                _context2.prev = 76;\n                _context2.prev = 77;\n\n                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                  _iterator2.return();\n                }\n\n              case 79:\n                _context2.prev = 79;\n\n                if (!_didIteratorError2) {\n                  _context2.next = 82;\n                  break;\n                }\n\n                throw _iteratorError2;\n\n              case 82:\n                return _context2.finish(79);\n\n              case 83:\n                return _context2.finish(76);\n\n              case 84:\n                return _context2.abrupt(\"return\", _this);\n\n              case 85:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee, this, [[17, 30, 34, 42], [35,, 37, 41], [46, 72, 76, 84], [53, 62], [77,, 79, 83]]);\n      }))();\n    }\n  }]);\n\n  return Database;\n}();\n/**\n * SQLite client library for Node.js applications\n *\n * Copyright © 2016 Kriasoft, LLC. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\n\nvar promise = global.Promise;\nvar db = new Database(null, {\n  Promise: promise\n});\n/**\n * Opens SQLite database.\n *\n * @returns Promise<Database> A promise that resolves to an instance of SQLite database client.\n */\n\ndb.open = function (filename) {\n  var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref4$mode = _ref4.mode,\n      mode = _ref4$mode === void 0 ? null : _ref4$mode,\n      _ref4$verbose = _ref4.verbose,\n      verbose = _ref4$verbose === void 0 ? false : _ref4$verbose,\n      _ref4$Promise = _ref4.Promise,\n      Promise = _ref4$Promise === void 0 ? promise : _ref4$Promise,\n      _ref4$cached = _ref4.cached,\n      cached = _ref4$cached === void 0 ? false : _ref4$cached;\n\n  var driver;\n  var DBDriver = sqlite3.Database;\n\n  if (cached) {\n    DBDriver = sqlite3.cached.Database;\n  }\n\n  if (verbose) {\n    sqlite3.verbose();\n  }\n\n  return new Promise(function (resolve, reject) {\n    if (mode !== null) {\n      driver = new DBDriver(filename, mode, function (err) {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    } else {\n      driver = new DBDriver(filename, function (err) {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    }\n  }).then(function () {\n    db.driver = driver;\n    db.Promise = Promise;\n    return new Database(driver, {\n      Promise: Promise\n    });\n  });\n};\n\nmodule.exports = db;","map":null,"metadata":{},"sourceType":"script"}